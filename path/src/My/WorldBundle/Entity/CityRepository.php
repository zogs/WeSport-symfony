<?php

namespace My\WorldBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
/**
 * CityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CityRepository extends EntityRepository
{
	public function findCityByUNI($uni)
	{
		$qb = $this->createQueryBuilder('c');
		$qb->where(
			$qb->expr()->eq('c.uni',':uni')
			);
		$qb->setParameter('uni',$uni);
		
		return $qb->getQuery()->getSingleResult();

	}

	public function findCityById($id)
	{
		$qb = $this->createQueryBuilder('c');
		$qb->where(
			$qb->expr()->eq('c.id',':id')
			);
		$qb->setParameter('id',$id);
		
		return $qb->getQuery()->getOneOrNullResult();

	}

	public function findCityByName($name,$countryCode = null, $regionCode = null, $departementCode = null, $districtCode = null, $divisionCode = null)
	{
		$qb = $this->createQueryBuilder('c');

		if(isset($countryCode))
			$qb->andWhere($qb->expr()->eq('c.cc1',$qb->expr()->literal($countryCode)));
		if(isset($regionCode))
			$qb->andWhere($qb->expr()->eq('c.adm1',$qb->expr()->literal($regionCode)));
		if(isset($departementCode))
			$qb->andWhere($qb->expr()->eq('c.adm2',$qb->expr()->literal($departementCode)));
		if(isset($districtCode))
			$qb->andWhere($qb->expr()->eq('c.adm3',$qb->expr()->literal($districtCode)));
		if(isset($divisionCode))
			$qb->andWhere($qb->expr()->eq('c.adm4',$qb->expr()->literal($divisionCode)));

		$qb->andWhere(
			$qb->expr()->eq('c.fullnamed',$qb->expr()->literal($name)));

		$qb->addOrderBy('c.pop','DESC');
		$qb->setMaxResults(1);

		return $qb->getQuery()->getOneOrNullResult();
	}
	public function findCitiesSuggestions( $limit, $prefix , $countryCode = null, $regionCode = null, $departementCode = null, $districtCode = null, $divisionCode = null){

		$qb = $this->createQueryBuilder('c');

		if(isset($countryCode))
			$qb->andWhere($qb->expr()->eq('c.cc1',$qb->expr()->literal($countryCode)));			
		if(isset($regionCode))
			$qb->andWhere($qb->expr()->eq('c.adm1',$qb->expr()->literal($regionCode)));			
		if(isset($departementCode))
			$qb->andWhere($qb->expr()->eq('c.adm2',$qb->expr()->literal($departementCode)));
		if(isset($districtCode))
			$qb->andWhere($qb->expr()->eq('c.adm3',$qb->expr()->literal($districtCode)));
		if(isset($divisionCode))
			$qb->andWhere($qb->expr()->eq('c.adm4',$qb->expr()->literal($divisionCode)));			

		$qb->andWhere(
				$qb->expr()->like('c.fullnamed',$qb->expr()->literal($prefix.'%'))
			);

		$qb->setMaxResults( $limit );
		$qb->orderBy('c.pop','DESC');
		$qb->addOrderBy('c.fullnamed','ASC');

		return $qb->getQuery()->getResult();
	}


	public function findCitiesByStateParent($parent)
	{
		if($parent->getLevel()=='country')
			return $this->findCitiesByCode($parent->getCc1());
		if($parent->getLevel()=='region')
			return $this->findCitiesByCode($parent->getCc1(),$parent->getADMCODE());
		if($parent->getLevel()=='departement')
			return $this->findCitiesByCode($parent->getCc1(),$parent->getADMPARENT(),$parent->getADMCODE());
		if($parent->getLevel()=='district')
			return $this->findCitiesByCode($parent->getCc1(),null,$parent->getADMPARENT(),$parent->getADMCODE());
		if($parent->getLevel()=='division')
			return $this->findCitiesByCode($parent->getCc1(),null,null,$parent->getADMPARENT(),$parent->getADMCODE());
		
	}

	public function findCitiesByCode($countryCode, $regionCode = null, $departementCode = null, $districtCode = null, $divisionCode = null)
	{
		$sql = "
			SELECT s
			FROM MyWorldBundle:City s 
			JOIN MyWorldBundle:Country c 
			WITH c.code = s.cc1
			WHERE s.cc1 = :cc1
			AND (
				";
		if(isset($regionCode))
			$sql .= " s.adm1 = :adm1 ";
		if(isset($departementCode))
			$sql .= " AND s.adm2 = :adm2 ";
		if(isset($districtCode))
			$sql .= " AND s.adm3 = :adm3 ";
		if(isset($divisionCode))
			$sql .= " AND s.adm4 = :adm4 ";
		$sql .="
			)
			AND (
				s.lc = c.lang
				OR
				s.lc = ''
				)
			ORDER BY s.fullnamed ";
		
		$query = $this->getEntityManager()->createQuery($sql);
		$query->setParameter('cc1',$countryCode);
		if(isset($regionCode))
			$query->setParameter('adm1',$regionCode);
		if(isset($departementCode))
			$query->setParameter('adm2',$departementCode);
		if(isset($districtCode))
			$query->setParameter('adm3',$districtCode);
		if(isset($divisionCode))
			$query->setParameter('adm4',$divisionCode);

		return $query->getResult();
	}

	public function findCitiesArround($radius, $lat, $lon, $countryCode = null, $unit = 'km')
	{		
		//constante for units
		if($unit=='km')
		{
			$onedegree = 111.045;
			$earthradius = 6366.565;			
		}
		elseif($unit=='miles')
		{
			$onedegree = 69;
			$earthradius = 3956;
		}

		//calcul of the box
		$lon1 = $lon-$radius/abs(cos(deg2rad($lat))*$onedegree);
		$lon2 = $lon+$radius/abs(cos(deg2rad($lat))*$onedegree);
		$lat1 = $lat-($radius/$onedegree);
		$lat2 = $lat+($radius/$onedegree);

		//calculation of distance field
		$distance_formula = " $earthradius * 2 * ASIN(SQRT( POWER(SIN(($lat - C.latitude) *  pi()/180 / 2), 2) +COS($lat * pi()/180) * COS(C.latitude * pi()/180) * POWER(SIN(($lon - C.longitude) * pi()/180 / 2), 2) )) as distance ";

		$sql = 'SELECT C.*, '.$distance_formula;
		$sql .= 'FROM world_cities as C ';
		$sql .= 'WHERE 1=1 ';
		if(isset($countryCode))
			$sql .= 'AND cc1=:cc1 ';
		$sql .= ' AND C.longitude BETWEEN '.$lon1.' AND '.$lon2.' AND C.latitude BETWEEN '.$lat1.' AND '.$lat2.' ';
		$sql .= ' having distance < '.$radius;
		$sql .= ' ORDER BY distance ASC';

		//Use the ResultSetMappingBuilder to map the results data to the City object data
		$rsm = new ResultSetMappingBuilder($this->_em);
		$rsm->addRootEntityFromClassMetadata('My\WorldBundle\Entity\City', 'C');
			
		$query = $this->_em->createNativeQuery($sql,$rsm);
		$query->setParameter('cc1',$countryCode);

		$results = $query->getResult();

		return $results;
		//return $this->getQuery($sql)->getResult();

	}


	private function resultSetMappingCity()
	{
		$rsm = new ResultSetMapping();
		$rsm->addEntityResult('My\WorldBundle\Entity\City', 'C');
		$rsm->addFieldResult('C', 'id', 'id');
		$rsm->addFieldResult('C', 'CHAR_CODE', 'char_code');		
		$rsm->addFieldResult('C', 'UNI', 'uni');
		$rsm->addFieldResult('C', 'CC1', 'cc1');
		$rsm->addFieldResult('C', 'DSG', 'dsg');
		$rsm->addFieldResult('C', 'ADM1', 'adm1');
		$rsm->addFieldResult('C', 'ADM2', 'adm2');
		$rsm->addFieldResult('C', 'ADM3', 'adm3');
		$rsm->addFieldResult('C', 'ADM4', 'adm4');
		$rsm->addFieldResult('C', 'LC', 'lc');
		$rsm->addFieldResult('C', 'FULLNAMED', 'fullnamed');
		$rsm->addFieldResult('C', 'LATITUDE', 'latitude');
		$rsm->addFieldResult('C', 'LONGITUDE', 'longitude');		

		return $rsm;
	}
}
