<?php

namespace Ws\EventsBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
	private $params;

	public function findCalendarEvents($params = array())
	{
		$this->params = $params;
		
		//disable sql logging
		$this->_em->getConnection()->getConfiguration()->setSQLLogger(null);

		$day = $params['date'];
		$events = array();

		for ($i=1; $i <= $params['nbdays']; $i++) { 

			$events[$day] = $this->findEventsByDate($day);
			$day = date("Y-m-d", strtotime($day. " +1 day"));
		}
		//prevent memory leak
		$this->_em->clear();

		return $events;
	}

	public function findEventsByDate($date)
	{

		$qb = $this->createQueryBuilder('e');

		$qb->select('e');

		$qb = $this->filterByDate($qb,$date);
		$qb = $this->filterBySports($qb);
		$qb = $this->filterByOnline($qb);		
		$qb = $this->filterByCityQuery($qb);
		$qb = $this->filterByType($qb);
		$qb = $this->filterByTime($qb);
		$qb = $this->filterByPrice($qb);
		$qb = $this->filterByOrganizer($qb);
	
		/*
		\Doctrine\Common\Util\Debug::dump($qb->getParameters());
		\Doctrine\Common\Util\Debug::dump($qb->getDQL());
		exit();
		*/
		
		return $qb->getQuery()->getResult();
	}


	public function filterByCityQuery($qb)
	{		
		if(!isset($this->params['city'])) return $qb;

		$location = $this->_em->getRepository('MyWorldBundle:Location')->findLocationByCityId($this->params['city']->getId());

		//free memory
		$this->_em->detach($location);

		if(empty($this->params['area']))
			return $this->filterByLocation($qb,$location);
		else
			return $this->filterByArea($qb,$location);
	}

	public function filterByArea($qb,$location)
	{
		$onedegree = 111.045;
		$earthradius = 6366.565;
		if(!empty($this->params['extend_metric']) && $this->params['extend_metric'] == 'km'){ // in km
			$onedegree = 111.045;
			$earthradius = 6366.565;
		}
		if(!empty($this->params['extend_metric']) && $this->params['extend_metric'] == 'miles'){ // in km
			$onedegree = 69;
			$earthradius = 3956;
		}

		$cityLat = $location->getCity()->getLat();
		$cityLon = $location->getCity()->getLon();
		$distance= $this->params['area'];
		$lon1 = $cityLon-$distance/abs(cos(deg2rad($cityLat))*$onedegree);
		$lon2 = $cityLon+$distance/abs(cos(deg2rad($cityLat))*$onedegree);
		$lat1 = $cityLat-($distance/$onedegree);
		$lat2 = $cityLat+($distance/$onedegree);

		$extend_zone = "$earthradius * 2 * ASIN(SQRT(POWER(SIN(($cityLat - C.LATITUDE) *  pi()/180 / 2), 2) +COS($cityLat * pi()/180) * COS(C.LATITUDE * pi()/180) * POWER(SIN(($cityLon - C.LONGITUDE) * pi()/180 / 2), 2) )) as HIDDEN distance";
								
		$qb->select('e',$extend_zone);
		$qb->innerJoin('e.location','L');
		$qb->innerJoin('L.city','C');

		$qb->andWhere('C.LONGITUDE BETWEEN '.$lon1.' AND '.$lon2.' AND C.LATITUDE BETWEEN '.$lat1.' AND '.$lat2);


		return $qb;

	}

	public function filterByCityArround($qb,$location)
	{
		//get cities arroud the location
		$cities = $this->_em->getRepository('MyWorldBundle:City')->findCitiesArround(
			$this->params['area'],
			$location->getCity()->getLat(),
			$location->getCity()->getLon(),
			$this->params['country']
			);

		//get location of cities
		foreach($cities as $k => $city){
			
			$location = $this->_em->getRepository('MyWorldBundle:Location')->findLocationByCityId($city->getId());
			$locations[] = $location;
			
		}
		
		return $this->filterByLocationArray($qb,$locations);
	}

	public function filterByLocation($qb,$location)
	{		
		$qb->setParameter('location',$location);
		return $qb->andWhere($qb->expr()->eq('e.location',':location'));
	}

	public function filterByLocationArray($qb,$locations)
	{
		$qb->setParameter(':locations',$locations);
		return $qb->andWhere('e.location IN (:locations)');
	}

	public function filterBySports($qb)
	{
		if(empty($this->params['sports'])) return $qb;		

		$qb->setParameter(':sports',$this->params['sports']); // ex :sports = array(67,68,98);
		return $qb->andWhere('e.sport IN (:sports)');		
	}

	public function filterByType($qb)
	{
		if(empty($this->params['type'])) return $qb;

		$qb->setParameter('type',$this->params['type']);
		return $qb->andWhere('e.type IN (:type)');
	}

	public function filterByDate($qb,$date)
	{
		$qb->setParameter('date',$date);
		return $qb->andWhere(
			$qb->expr()->eq('e.date',':date')
			);		
	}

	public function filterByTime($qb)
	{
		if(empty($this->params['time'])) return $qb;

		return $qb->andWhere($qb->expr()->between('e.time',':timestart',':timeend'))->setParameter('timestart',$this->params['time']['start'])->setParameter('timeend',$this->params['time']['end']);
		
	}

	public function filterByPrice($qb)
	{
		if(!isset($this->params['price'])) return $qb;
		return $qb->andWhere($qb->expr()->lt('e.price',':price'))->setParameter('price',$this->params['price']);
	}

	public function filterByOrganizer($qb)
	{
		if(!isset($this->params['organizer'])) return $qb;

		return $qb->andWhere($qb->expr()->eq('e.organizer',':organizer'))->setParameter('organizer',$this->params['organizer']);		
	}

	public function filterByOnline($qb)
	{
		return $qb->andWhere('e.online = 1');
	}

	public function filterByOffline($qb)
	{
		return $qb->andWhere('e.online = 1');
	}

	public function filterByBothline($qb)
	{
		return $qb->andWhere('e.online = 1 OR e.online = 0');
	}

	




	public function findRecentUniqueEventPosted()
	{
		$series = $this->_em->getRepository('WsEventsBundle:Serie')->findRecentSeriePosted();

		$events = array();
		foreach ($series as $serie) {
			$events[] = $this->findFirstEventOfSerie($serie);
		}

		return $events;
	}	

	public function findFirstEventOfSerie($serie)
	{
		$qb = $this->_em->createQueryBuilder('e');

		$qb->select('e')
			->from('Event','e')
			->where('e.serie',$serie)
			->setMaxResults(1);

		return $qb->getQuery()->getResult();

	}


}
